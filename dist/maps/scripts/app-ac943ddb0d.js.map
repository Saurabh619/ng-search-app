{"version":3,"sources":["scripts/app.js"],"names":["angular","module","DataService","$log","$q","$http","cities","headers","getCities","getHeaders","$inject","factory","GatewayFactory","execute","city","limit","offset","promise","defer","baseURL","apiHost","toUpperCase","Content-Type","get","then","result","debug","resolve","reject","service","MainController","$scope","$window","$document","$timeout","navFunction","pageYOffset","sticky","navbar","classList","add","remove","banks","loading","searchable_city","nanobarOptions","classname","nanobar","Nanobar","checkIfEmpty","temp","isDefined","findBanksInTheCity","go","response","data","forEach","e","push","error","selectedFieldName","searchText","selectFieldName","head","SearchList","row","propVal","toLowerCase","indexOf","onscroll","document","getElementById","offsetTop","controller","runBlock","run","routerConfig","$stateProvider","$urlRouterProvider","state","url","templateUrl","controllerAs","otherwise","config","$locationProvider","$logProvider","$qProvider","html5Mode","enabled","requireBase","hashPrefix","debugEnabled","window","location","origin","errorOnUnhandledRejections","$templateCache","put"],"mappings":"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","file":"scripts/app-ac943ddb0d.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular\n    .module('banker', ['ui.router']);\n\n})();\n\n(function() {\n  'use strict';\n\n  angular.module('banker').factory('DataService', DataService);\n\n  /** @ngInject */\n  function DataService($log, $q, $http) {\n\n    var cities = [ \"bangalore\", \"delhi\", \"mumbai\", \"jaipur\", \"udaipur\", \"chennai\" ];\n    var headers = [ \"ifsc\", \"bank_id\", \"bank_name\", \"branch\", \"address\", \"city\", \"district\", \"state\" ];\n\n    return {\n      getCities: function() {\n        return cities;\n      },\n      getHeaders: function() {\n        return headers;\n      }\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular.module('banker').factory('GatewayFactory', GatewayFactory);\n\n  /** @ngInject */\n  function GatewayFactory($log, $q, $http) {\n    var apiHost = 'https://app.fyle.in/api/';\n\n    var service = {\n      apiHost: apiHost,\n      execute: execute\n    };\n\n    return service;\n\n    function execute(city, limit, offset) {\n      if (!limit) {\n        limit = 50;\n      }\n\n      if (!offset) {\n        offset = 0;\n      }\n\n      var promise = $q.defer();\n      var baseURL = apiHost + 'bank_branches?city=' + city.toUpperCase() + '&offset=' + offset + '&limit=' + limit;\n      var headers = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n      $http.get(baseURL, headers).then(function(result) {\n        $log.debug('Created object, ', result);\n        promise.resolve(result);\n      }, function(result) {\n        $log.debug(\"Failed to create object:\", result);\n        promise.reject(result);\n      });\n      return promise.promise;\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular.module('banker').controller('MainController', MainController);\n\n  /** @ngInject */\n  function MainController($scope, $window, $document, $timeout, GatewayFactory, DataService) {\n\n    // model declarations\n    $scope.banks = [];\n    $scope.limit = 50;\n    $scope.offset = 0;\n    $scope.loading = false;\n    $scope.searchable_city = '';\n    $scope.cities = DataService.getCities();\n    $scope.headers = DataService.getHeaders();\n\n    // nanobar for load progress\n    $scope.nanobarOptions = {\n      classname: 'nanobar'\n    };\n\n    var nanobar = new Nanobar($scope.nanobarOptions);\n\n    $scope.checkIfEmpty = function(temp) {\n      return angular.isDefined(temp);\n    }\n\n    // find bank/branch in a city - can provide limit and offset to restrict number of incoming objects\n    $scope.findBanksInTheCity = function(limit, offset) {\n      if (!$scope.loading) {\n\n        nanobar.go(60);\n        $scope.limit = limit;\n        $scope.offset += offset;\n        $scope.loading = true;\n\n        GatewayFactory.execute($scope.searchable_city, $scope.limit, $scope.offset).then(function(response) {\n          if (typeof response.data != 'undefined' && response.data) {\n            response.data.forEach(function(e) {\n              $scope.banks.push(e);\n            });\n            nanobar.go(100);\n            $scope.loading = false;\n          } else {\n            $scope.loading = false;\n          }\n        }).then(function(error) {\n          nanobar.go(100);\n          $scope.loading = false;\n        })\n      }\n    };\n\n    // search functionality\n    $scope.selectedFieldName = 'bank_name';\n    $scope.searchText = '';\n\n    // Set search category on change\n    $scope.selectFieldName = function(head) {\n      $scope.selectedFieldName = head;\n    }\n\n    // SearchList filter takes each object of array, reads and checks whether the search string is present, if yes return true else false;\n    $scope.SearchList = function(row) {\n      if ($scope.selectedFieldName && $scope.searchText) {\n        $scope.loading = true;\n        var propVal = row[$scope.selectedFieldName.toLowerCase()] + '';\n        if (propVal) {\n          $scope.loading = false;\n          return propVal.toUpperCase().indexOf($scope.searchText.toUpperCase()) > -1;\n        } else {\n          $scope.loading = false;\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // sticky searchbar on top while scroll is on\n    $window.onscroll = function() {\n      navFunction();\n    };\n\n    var navbar = document.getElementById(\"navbar\");\n    var sticky = navbar.offsetTop;\n\n    function navFunction() {\n      if ($window.pageYOffset >= sticky) {\n        navbar.classList.add(\"sticky\");\n      } else {\n        navbar.classList.remove(\"sticky\");\n      }\n    };\n\n    // TBD - lazy load on scroll\n    function lazyload(){\n\n    }\n  }\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('banker')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('banker')\n    .config(routerConfig);\n\n  /** @ngInject */\n  function routerConfig($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('home', {\n        url: '/',\n        templateUrl: 'app/main/main.html',\n        controller: 'MainController',\n        controllerAs: 'main'\n      });\n\n    $urlRouterProvider.otherwise('/');\n  }\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('banker')\n\n})();\n\n(function() {\n  'use strict';\n\n  angular\n    .module('banker')\n    .config(config);\n\n  config.$inject = ['$locationProvider', '$logProvider', '$qProvider'];\n\n  /** @ngInject */\n  function config($locationProvider, $logProvider, $qProvider) {\n\n    // Remove # break from URL\n    $locationProvider.html5Mode({\n      enabled: true,\n      requireBase: false\n    }).hashPrefix('!');\n\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    var baseURL = window.location.origin + '/api';\n\n    $qProvider.errorOnUnhandledRejections(false);\n  }\n\n})();\n\nangular.module(\"banker\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/main/main.html\",\"<div class=container id=navbar><div class=logo><img class=logostyle src=\\\"https://www.fylehq.com/hs-fs/hubfs/Home/Logo.png?t=1514441745881&width=38&name=Logo.png\\\" alt=fyle> <span class=padd><h3 class=fyletext>Find your</h3><h1 class=\\\"fyletext padlr\\\">Bank</h1><h3 class=fyletext>here !</h3></span></div><div class=row><select class=dropdown name=search id=softflow ng-model=searchable_city ng-change=findBanksInTheCity(50,0)><option value=\\\"\\\" selected>Select City</option><option ng-repeat=\\\"city in cities\\\" ng-value=city ng-bind=\\\"city | uppercase\\\"></option></select><input class=\\\"searchbar fyletext\\\" type=text name=bar ng-model=searchText placeholder=\\\"🔎   Search by {{selectedFieldName | uppercase}}\\\"> <button class=fylebutton type=button name=button ng-click=findBanksInTheCity(50,-50) ng-disabled=\\\"offset == 0\\\" ng-class=\\\"{\\'disabled\\': offset == 0}\\\">Previous</button> <button class=fylebutton type=button name=button ng-click=findBanksInTheCity(50,50)>Next</button></div></div><div class=\\\"table content\\\"><table ng-if=\\\"searchable_city && banks\\\" when-scrolled=more()><tr class=head id=header><th class=tableheader ng-repeat=\\\"head in headers\\\"><span ng-bind=\\\"head | uppercase\\\" ng-class=\\\"{\\'fyletext\\': selectedFieldName == head}\\\"></span> <span style=display:none><input type=radio name=thisradio ng-model=selectedFieldName value=yes> </span><img id=radio1 src=assets/images/filter-outline.png class=filter ng-click=selectFieldName(head) style=cursor:pointer></th></tr><tbody><tr class=tablerows ng-repeat=\\\"bank in banks | filter:SearchList\\\"><td ng-repeat=\\\"head in headers\\\" ng-bind=\\\"bank[head] | uppercase\\\"></td></tr></tbody></table><div class=\\\"sp sp-wave\\\" ng-if=\\\"searchable_city != \\'\\' && loading\\\"></div><div class=paddtb ng-if=\\\"searchable_city != \\'\\' && !loading && (banks | filter:SearchList).length == 0\\\">Nothing here! Try searching with different combinations...</div></div>\");}]);"],"sourceRoot":"/source/"}